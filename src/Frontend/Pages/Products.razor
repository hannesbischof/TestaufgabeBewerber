@page "/products"

@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http

<h3>Manage Products</h3>

<div class="filters">
    <label for="sortBy">Sort By:</label>
    <select id="sortBy" @bind="sortBy" class="form-control" @onchange="LoadProducts">
        <option value="Name">Name</option>
        <option value="Price">Price</option>
        <option value="Category">Category</option>
    </select>

    <label for="sortOrder">Sort Order:</label>
    <select id="sortOrder" @bind="sortOrder" class="form-control" @onchange="LoadProducts">
        <option value="asc">Ascending</option>
        <option value="desc">Descending</option>
    </select>

    <label for="filter">Filter:</label>
    <InputText id="filter" class="form-control" @bind-Value="filter" @oninput="LoadProducts" placeholder="Search..." />
</div>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Price</th>
                <th>Description</th>
                <th>Category</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                if (editingProduct?.Id == product.Id)
                {
                    <tr>
                        <td><InputText @bind-Value="editingProduct.Name" class="form-control" /></td>
                        <td><InputNumber @bind-Value="editingProduct.Price" class="form-control" /></td>
                        <td><InputText @bind-Value="editingProduct.Description" class="form-control" /></td>
                        <td>
                            <select @bind="editingProduct.CategoryId" class="form-control">
                                <option value="">Select a category</option>
                                @foreach (var category in categories)
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                            </select>
                        </td>
                        <td>
                            <button class="btn btn-success" @onclick="SaveProduct">Save</button>
                            <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                        </td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td>@product.Name</td>
                        <td>@product.Price</td>
                        <td>@product.Description</td>
                        <td>@categories.FirstOrDefault(c => c.Id == product.CategoryId)?.Name</td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => EditProduct(product)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => DeleteProduct(product.Id)">Delete</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

    <div class="pagination-controls">
        <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@IsFirstPage">Previous</button>
        <span>Page @currentPage of @totalPages</span>
        <button class="btn btn-secondary" @onclick="NextPage" disabled="@IsLastPage">Next</button>
    </div>

    <button class="btn btn-primary" @onclick="ShowCreateForm">Add New Product</button>

    @if (showCreateForm)
    {
        <EditForm Model="@newProduct" OnValidSubmit="CreateProduct">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="name">Name</label>
                <InputText id="name" class="form-control" @bind-Value="newProduct.Name" />
                <ValidationMessage For="@(() => newProduct.Name)" />
            </div>

            <div class="form-group">
                <label for="price">Price</label>
                <InputNumber id="price" class="form-control" @bind-Value="newProduct.Price" />
                <ValidationMessage For="@(() => newProduct.Price)" />
            </div>

            <div class="form-group">
                <label for="description">Description</label>
                <InputText id="description" class="form-control" @bind-Value="newProduct.Description" />
                <ValidationMessage For="@(() => newProduct.Description)" />
            </div>

            <div class="form-group">
                <label for="categoryId">Category</label>
                <select id="categoryId" class="form-control" @bind="newProduct.CategoryId">
                    <option value="">Select a category</option>
                    @foreach (var category in categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </select>
                <ValidationMessage For="@(() => newProduct.CategoryId)" />
            </div>

            <button type="submit" class="btn btn-success">Create</button>
            <button type="button" class="btn btn-secondary" @onclick="CancelCreate">Cancel</button>
        </EditForm>
    }
}

@code {
    private List<Product>? products;
    private List<Category>? categories;
    private Product? editingProduct;
    private Product newProduct = new Product();
    private bool showCreateForm = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
        await LoadCategories();
    }

    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages;

    private string sortBy = "Name";
    private string sortOrder = "asc";
    private string filter = string.Empty;

    private async Task LoadProducts()
    {
        var response = await Http.GetAsync($"api/products?pageNumber={currentPage}&pageSize={pageSize}&sortBy={Uri.EscapeDataString(sortBy)}&sortOrder={Uri.EscapeDataString(sortOrder)}&filter={Uri.EscapeDataString(filter)}");
        if (response.IsSuccessStatusCode)
        {
            var paginatedResponse = await response.Content.ReadFromJsonAsync<PaginatedResponse<Product>>();
            products = paginatedResponse.Items;
            totalPages = paginatedResponse.TotalPages;
        }
    }

    private async Task LoadCategories()
    {
        categories = await Http.GetFromJsonAsync<List<Category>>("api/categories");
    }

    private void EditProduct(Product product)
    {
        editingProduct = new Product
        {
            Id = product.Id,
            Name = product.Name,
            Price = product.Price,
            Description = product.Description,
            CategoryId = product.CategoryId
        };
    }

    private async Task SaveProduct()
    {
        await Http.PutAsJsonAsync($"api/products/{editingProduct.Id}", editingProduct);
        editingProduct = null;
        await LoadProducts();
    }

    private void CancelEdit()
    {
        editingProduct = null;
    }

    private async Task DeleteProduct(int id)
    {
        await Http.DeleteAsync($"api/products/{id}");
        await LoadProducts();
    }

    private void ShowCreateForm()
    {
        showCreateForm = true;
    }

    private async Task CreateProduct()
    {
        await Http.PostAsJsonAsync("api/products", newProduct);
        newProduct = new Product();
        showCreateForm = false;
        await LoadProducts();
    }

    private void CancelCreate()
    {
        newProduct = new Product();
        showCreateForm = false;
    }

    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage == totalPages;

    private async Task PreviousPage()
    {
        if (!IsFirstPage)
        {
            currentPage--;
            await LoadProducts();
        }
    }

    private async Task NextPage()
    {
        if (!IsLastPage)
        {
            currentPage++;
            await LoadProducts();
        }
    }

    public class PaginatedResponse<T>
    {
        public List<T> Items { get; set; } = new List<T>();
        public int TotalPages { get; set; }
    }

    public class Product
    {
        public int Id { get; set; }

        [Required]
        [StringLength(100, MinimumLength = 5, ErrorMessage = "The Name must be at least 5 characters long.")]
        public string Name { get; set; } = string.Empty;

        [Required]
        [Range(0.01, double.MaxValue, ErrorMessage = "The Price must be greater than 0.")]
        public decimal Price { get; set; }

        [Required]
        [StringLength(500, MinimumLength = 10, ErrorMessage = "The Description must be between 10 and 500 characters.")]
        public string Description { get; set; } = string.Empty;

        [Required]
        public int CategoryId { get; set; }
    }
}