@page "/login"

@using System.ComponentModel.DataAnnotations

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
        <ValidationMessage For="@(() => loginModel.Username)" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private LoginModel loginModel = new LoginModel();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        // Simulate a login process (replace with actual authentication logic)
        if (loginModel.Username == "admin" && loginModel.Password == "password")
        {
            errorMessage = null;
            // Redirect to the home page or another page after successful login
            NavigationManager.NavigateTo("/");
        }
        else
        {
            errorMessage = "Invalid username or password.";
        }
    }

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    private class LoginModel
    {
        [Required(ErrorMessage = "Username is required.")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; } = string.Empty;
    }
}
```

### Step 4: Review the code
- **File Location**: The file is located at `src/Frontend/Pages/Login.razor`, as specified.
- **Form Structure**: The form uses `EditForm` with `DataAnnotationsValidator` for validation and `ValidationSummary` for displaying validation errors.
- **Input Fields**: The form includes fields for username and password, both bound to the `LoginModel` class.
- **Validation**: The `LoginModel` class uses `DataAnnotations` to enforce required fields with custom error messages.
- **Error Handling**: The page displays an error message if the login fails.
- **Navigation**: On successful login, the user is redirected to the home page using `NavigationManager`.
- **Blazor Conventions**: The implementation adheres to Blazor conventions and uses components like `InputText` and `ValidationMessage`.

### Final Output
```
@page "/login"

@using System.ComponentModel.DataAnnotations

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
        <ValidationMessage For="@(() => loginModel.Username)" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private LoginModel loginModel = new LoginModel();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        // Simulate a login process (replace with actual authentication logic)
        if (loginModel.Username == "admin" && loginModel.Password == "password")
        {
            errorMessage = null;
            // Redirect to the home page or another page after successful login
            NavigationManager.NavigateTo("/");
        }
        else
        {
            errorMessage = "Invalid username or password.";
        }
    }

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    private class LoginModel
    {
        [Required(ErrorMessage = "Username is required.")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; } = string.Empty;
    }
}
